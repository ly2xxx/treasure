https://github.com/ly2xxx/treasure

I need to develop a new feature using my development crew:

Feature: Add European treasure locations to Treasure Map Explorer
Language: Python

Please coordinate this workflow:
0. Study the format of json files under raw/ folder carefully, your task is to research the likely Treasure Locations in Europe countries according to your knowledge (search internet if necessary) and create [country].json under the same location with your research outcome for each country. Tip: The result should contain the following columns "Location, Coordinates (Approximate), Treasure Value, Likelihood (%), Recommended Reason, Supporting Evidence, Supporting Evidence URLs". If a particular [country].json already exists in raw/ folder, consolidate the content with your research results and remove duplicated treasure locations.
1. Use MCP_DOCKER tools to create a feature/research_europe_locations branch if doesn't exist. If exist checkout the branch and continue.
2. Use claude-code-developer to implement suggested improvements.
3. Use gemini-qa-agent to adapt test_generic_countries.py to test all [country].json in raw/ folder.
4. After all [country].json passed gemini-qa-agent tests, commit the final implementation when you are comfortable with the outcomes, and create pull request to 'main' branch using MCP_DOCKER tools

4. After all [country].json passed gemini-qa-agent tests, use claude-code-developer to remove the code handling treasure.xlsx from app.py (since we now get all treasure locations from json files). use gemini-qa-agent to retest app.py make sure UI features are not broken.
5. Use gemini-qa-agent to review the generated code for security.
6. Commit the final implementation when you are comfortable with the outcomes, and create pull request to 'main' branch using MCP_DOCKER tools


1. Use claude-code-developer to create a feature branch and generate the json file. Create a unit test to make sure the new json locations render correctly in streamlit UI.
2. Use gemini-qa-agent to review the generated code for security.
3. Use claude-code-developer to implement suggested improvements.
4. Use gemini-qa-agent to run and generate comprehensive tests.
5. Commit the final implementation when you are comfortable with the outcomes, and create pull request to 'main' branch

Execute this workflow step by step.
https://youtu.be/djqkec6vBE4

https://github.com/ly2xxx/treasure

I need to develop a new feature using my development crew:

Feature: Add Area values to treasure location dropdown items in bracket
Language: Python

Please coordinate this workflow:
0. Add Area values to treasure location dropdown items in bracket. For example: "Moelfre, Anglesey" should be "Moelfre, Anglesey (Wales)". Also make the (Nearby Locations) square longer ideally the length should be flexible to fit the location value.
1. Use MCP_DOCKER tools to create a feature/add-area-to-dropdown branch if doesn't exist. If exist checkout the branch and continue.
2. Use claude-code-developer to implement suggested improvements.
3. Use gemini-qa-agent to review the generated code for security.
4. Use gemini-qa-agent to generate comprehensive tests for changed code.
5. Commit the final implementation when you are comfortable with the outcomes, and create pull request to 'main' branch using MCP_DOCKER tools